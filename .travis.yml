sudo: required
dist: trusty
language: cpp

# env:
# Run against all supported versions of Python (this environment variable is
# used further down the fetch an appropriate Python interpreter).
matrix:
  include:
    - os: osx
      osx_image: xcode9.4
      env: PYVER=2.7
      language: generic
    - os: osx
      osx_image: xcode9.4
      env: PYVER=3.5
      language: generic
    - os: osx
      osx_image: xcode9.4
      env: PYVER=3.6
      language: generic
    - os: linux
      language: python
      python: 2.7
    - os: linux
      language: python
      python: 3.4
    - os: linux
      language: python
      python: 3.5
    - os: linux
      language: python
      python: 3.6

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo add-apt-repository -y ppa:beineri/opt-qt58-trusty; fi

install:
  # Install 'pyenv': a utility for downloading and switching between multiple
  # Python interpreters on the same system.
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then git clone https://github.com/yyuu/pyenv.git ~/.pyenv; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then PYENV_ROOT="$HOME/.pyenv"; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then PATH="$PYENV_ROOT/bin:$PATH"; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then eval "$(pyenv init -)"; fi
  # Install the latest release of the specified Python version using pyenv.
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then PYVER="$(pyenv install --list | grep -E "^\\s*$PYVER" | sort -n -t. -k3 | tail -n1)"; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then pyenv install $PYVER; fi
  # Make the newly installed version the default "python" command.
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then pyenv global $PYVER; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then python --version; fi
   # Install PIP
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then curl -O https://bootstrap.pypa.io/get-pip.py; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then python get-pip.py --user; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then python -m pip install pip==9.0.3; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then python -m pip install six; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then pip install codecov coverage pyobjc; fi


  # Linux dev dependencies:

  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then pip install python-xlib codecov coverage; fi
  # All this dependencies only to build tests application. No real dependency of this packages
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get update; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get -y install at-spi2-core; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get install -qq qt58base; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get -y install qt58declarative qt58tools; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get install xsel; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get install libgtk-3-dev libgtk2.0-dev; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get install -y python3-gi; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then source /opt/qt58/bin/qt58-env.sh; fi

before_script:
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then export DISPLAY=:99.0; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sh -e /etc/init.d/xvfb start; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sleep 3; fi
  # give xvfb some time to start;
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then xauth generate :99.0 . trusted; fi
  # Clone test apps
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then git init apps; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cd apps; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then git remote add -f origin https://github.com/pywinauto/PywinautoTestapps/; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then git config core.sparseCheckout true; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then echo "MouseTester/source" >> .git/info/sparse-checkout; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then echo "SendKeysTester/source" >> .git/info/sparse-checkout; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then git pull origin master; fi

  # Build test apps on Linux
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cd MouseTester/source; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then qmake; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then make; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then chmod a+x mousebuttons; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cp mousebuttons ../; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cd $TRAVIS_BUILD_DIR; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cd apps/SendKeysTester/source; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then qmake; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then make; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then chmod a+x send_keys_test_app; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cp send_keys_test_app ../; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then cd $TRAVIS_BUILD_DIR; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then chmod a+x $TRAVIS_BUILD_DIR/apps/Gtk_samples/gtk_example.py; fi

  # Install test apps on macOS
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd $TRAVIS_BUILD_DIR; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd apps/MouseTester/macos; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo hdiutil attach mousebuttons.dmg; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo cp -R /Volumes/mousebuttons/mousebuttons.app /Applications; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo hdiutil detach /Volumes/mousebuttons/; fi
  
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd $TRAVIS_BUILD_DIR; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd apps/SendKeysTester/macos; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo hdiutil attach send_keys_test_app.dmg; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo cp -R /Volumes/send_keys_test_app/send_keys_test_app.app /Applications; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo hdiutil detach /Volumes/send_keys_test_app/; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd $TRAVIS_BUILD_DIR; fi

# unit tests for controls are turned off due to we are not able to provide the accessibility permissions for testing on remote environment
# uncomment the lines below to install the control testing app
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd $TRAVIS_BUILD_DIR; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd apps/Controls/macos; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo hdiutil attach test_app_controls.dmg; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo cp -R /Volumes/test_app_controls/ControlsTestAppSB.app /Applications; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo hdiutil detach /Volumes/test_app_controls/; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd $TRAVIS_BUILD_DIR; fi

script:
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then coverage run -a --include=pywinauto/mouse.py pywinauto/unittests/test_mouse.py; fi
  - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then coverage run -a --include=pywinauto/macos/keyboard_helper.py pywinauto/unittests/test_keyboard.py; fi
  # Application and element info unit tests are turned off due to we are not able to provide the accessibility permissions for testing on remote environment
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then coverage run -a --source=pywinauto/macos pywinauto/unittests/macos/test_application_macos.py; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then coverage run -a --source=pywinauto/macos pywinauto/unittests/macos/test_ax_element_info_macos.py; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then coverage run -a --source=pywinauto/macos pywinauto/unittests/macos/test_ax_wrapper.py; fi
  # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then coverage run -a --source=pywinauto/macos pywinauto/unittests/macos/test_ax_controls.py; fi

  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --include=pywinauto/mouse.py pywinauto/unittests/test_mouse.py; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --include=pywinauto/linux/keyboard.py pywinauto/unittests/test_keyboard.py; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --include=pywinauto/linux/clipboard.py pywinauto/unittests/linux/test_clipboard_linux.py; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --include=pywinauto/linux/application.py pywinauto/unittests/linux/test_application_linux.py; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --source=pywinauto/linux,pywinauto/controls pywinauto/unittests/linux/test_atspi_element_info.py; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --source=pywinauto/linux,pywinauto/controls pywinauto/unittests/linux/test_atspi_wrapper.py; fi
  - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then coverage run -a --source=pywinauto/linux,pywinauto/controls pywinauto/unittests/linux/test_atspi_controls.py; fi

after_success:
  - codecov
