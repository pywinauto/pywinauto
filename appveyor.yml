# Based on https://github.com/ogrisel/python-appveyor-demo
# and https://github.com/jjhelmus/appveyor-build-conda-pyart
#
# Hint: before committing any changes in the yaml file verify it in 
# the yaml online parser: http://yaml-online-parser.appspot.com/
#

# fetch repository as a zip archive
shallow_clone: true                 # default is "false"

environment:

  matrix:
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      UIA_SUPPORT: "YES"

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      UIA_SUPPORT: "NO"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      UIA_SUPPORT: "YES"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      UIA_SUPPORT: "NO"

    - PYTHON: "C:\\Python33"
      PYTHON_VERSION: "3.3"
      PYTHON_ARCH: "32"
      UIA_SUPPORT: "YES"

    - PYTHON: "C:\\Python33-x64"
      PYTHON_VERSION: "3.3"
      PYTHON_ARCH: "64"
      UIA_SUPPORT: "NO"

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"
      UIA_SUPPORT: "NO"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      UIA_SUPPORT: "YES"

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
      UIA_SUPPORT: "NO"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      UIA_SUPPORT: "NO"

#init:
  # Enable RDP.
  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
  # Some listings for debug only
  #- ECHO "Filesystem root:"
  #- ps: "ls \"C:/\""
  #- ECHO "Notepad location "
  #- ps: "ls C:\\Windows\\System32\\notepad.exe"

  # install the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pywin32, pillow and coverage
  - "powershell ./ci/install.ps1"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r dev-requirements.txt"

  # Enable desktop (for correct screenshots).
  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-desktop.ps1'))

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  # Build the compiled extension and run the project tests
  - "powershell ./ci/runTestsuite.ps1"


after_test:
  # Generate coverage report on codecov.io (token is not required for AppVeyor)
  - coverage xml
  - codecov
  - sphinx-build -w warnings.txt -E -b html .\doc_src .\html_docs

artifacts:
  # Archive the generated coverage report in the ci.appveyor.com build report.
  - path: Coverage_report
  - path: html_docs

#on_success:
#  - TODO: 
#

#on_failure:
  # Collect screenshots.
  #- "7z a screenshots.zip %APPVEYOR_BUILD_FOLDER%\\scr-*.jpg"
  #- "appveyor PushArtifact screenshots.zip"
